class Skobki: # создаем класс скобок
    def __init__(self, sk): # создаем конструктор класса - он создает атрибуты будующего обьекта (переменные, к которым можно будет обращаться)
        self.sk = sk # переменная, которая будет задаваться пользователем - строка из скобок
        self.all_pairs = {"{": "}", "(" : ")", "[": "]"} # словарь всех соответствий скобок
        self.zakr = ")]}" # строка всех закрывающихся скобок
        self.otrk = "{[(" # строка всех открывающихся скобок
    def check(self): # функция, для проверки на правильность расстановки скобок
        a = self.sk # переменная а будет содержать заданную пользователем строку
        x = [] # список х будет помещать в себя все открывающиеся скобки
        for sim in a: # проходим по всем элементам а
            if sim in self.zakr: # если символ закрывающийся
                if len(x) == 0: # если длина х уже равна 0, значит встретилось открывающихся скобок меньше, чем закрывающихся
                    return False  # следовательно - False
                last = x.pop() # удаляем последний элемент списка х, присваиявая его переменной last
                if self.all_pairs.get(last) == sim: # если закарывающаяся скобка, такая же, как и значение из словаря, для переменной last
                    # то эти скобки соответсвенно равны, а значит встретилась комбинация из открывающиейся и закрывающейся скобки, значит пока что все верно
                    pass # пропускаем итерацию
                else: # иначе
                    return False # скобки не совпали (к примеру last = "(", но sim = "}", следовательно это неверная пара скобок). возвращаем False
            elif sim in self.otrk: # или если скобка является открывающей
                x.append(sim) # то добавляем ее в конец списка х
        # если открывающихся скобок было больше, то х будет непустым после цикла: не все элементы удалятся
        if len(x) != 0:
            return False # следовательно False
        return True # если же все прошло успешно, то - True
s = Skobki("(){}{}[][{{}}]({}[])") # создаем экземпляр класса
print(s.check()) # вызываем функцию check у него
